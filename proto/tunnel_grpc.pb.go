// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: proto/tunnel.proto

package controller

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Tunnel_CreateTunnel_FullMethodName = "/service.Tunnel/CreateTunnel"
	Tunnel_Streaming_FullMethodName    = "/service.Tunnel/Streaming"
)

// TunnelClient is the client API for Tunnel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TunnelClient interface {
	CreateTunnel(ctx context.Context, in *TunnelRequest, opts ...grpc.CallOption) (*TunnelReply, error)
	Streaming(ctx context.Context, opts ...grpc.CallOption) (Tunnel_StreamingClient, error)
}

type tunnelClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelClient(cc grpc.ClientConnInterface) TunnelClient {
	return &tunnelClient{cc}
}

func (c *tunnelClient) CreateTunnel(ctx context.Context, in *TunnelRequest, opts ...grpc.CallOption) (*TunnelReply, error) {
	out := new(TunnelReply)
	err := c.cc.Invoke(ctx, Tunnel_CreateTunnel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) Streaming(ctx context.Context, opts ...grpc.CallOption) (Tunnel_StreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Tunnel_ServiceDesc.Streams[0], Tunnel_Streaming_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tunnelStreamingClient{stream}
	return x, nil
}

type Tunnel_StreamingClient interface {
	Send(*StreamingRequest) error
	Recv() (*StreamingReply, error)
	grpc.ClientStream
}

type tunnelStreamingClient struct {
	grpc.ClientStream
}

func (x *tunnelStreamingClient) Send(m *StreamingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tunnelStreamingClient) Recv() (*StreamingReply, error) {
	m := new(StreamingReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TunnelServer is the server API for Tunnel service.
// All implementations must embed UnimplementedTunnelServer
// for forward compatibility
type TunnelServer interface {
	CreateTunnel(context.Context, *TunnelRequest) (*TunnelReply, error)
	Streaming(Tunnel_StreamingServer) error
	mustEmbedUnimplementedTunnelServer()
}

// UnimplementedTunnelServer must be embedded to have forward compatible implementations.
type UnimplementedTunnelServer struct {
}

func (UnimplementedTunnelServer) CreateTunnel(context.Context, *TunnelRequest) (*TunnelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTunnel not implemented")
}
func (UnimplementedTunnelServer) Streaming(Tunnel_StreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method Streaming not implemented")
}
func (UnimplementedTunnelServer) mustEmbedUnimplementedTunnelServer() {}

// UnsafeTunnelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TunnelServer will
// result in compilation errors.
type UnsafeTunnelServer interface {
	mustEmbedUnimplementedTunnelServer()
}

func RegisterTunnelServer(s grpc.ServiceRegistrar, srv TunnelServer) {
	s.RegisterService(&Tunnel_ServiceDesc, srv)
}

func _Tunnel_CreateTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).CreateTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_CreateTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).CreateTunnel(ctx, req.(*TunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_Streaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TunnelServer).Streaming(&tunnelStreamingServer{stream})
}

type Tunnel_StreamingServer interface {
	Send(*StreamingReply) error
	Recv() (*StreamingRequest, error)
	grpc.ServerStream
}

type tunnelStreamingServer struct {
	grpc.ServerStream
}

func (x *tunnelStreamingServer) Send(m *StreamingReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tunnelStreamingServer) Recv() (*StreamingRequest, error) {
	m := new(StreamingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Tunnel_ServiceDesc is the grpc.ServiceDesc for Tunnel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tunnel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Tunnel",
	HandlerType: (*TunnelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTunnel",
			Handler:    _Tunnel_CreateTunnel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Streaming",
			Handler:       _Tunnel_Streaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/tunnel.proto",
}
